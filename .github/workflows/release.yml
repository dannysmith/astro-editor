name: 'Release Astro Editor'

on:
  push:
    tags: ['v*']
  workflow_dispatch:
    inputs:
      version:
        description: 'Release version (e.g., v1.0.0)'
        required: true
        type: string

env:
  CARGO_TERM_COLOR: always
  RUST_BACKTRACE: 1

jobs:
  publish-tauri:
    permissions:
      contents: write
      actions: write
    strategy:
      fail-fast: false
      matrix:
        include:
          - platform: 'macos-14'
            args: '--target universal-apple-darwin --bundles app,dmg'

    runs-on: ${{ matrix.platform }}
    steps:
      - uses: actions/checkout@v4

      - name: Setup pnpm
        uses: pnpm/action-setup@v4
        with:
          version: 9
          run_install: false

      - name: Setup Node.js
        uses: actions/setup-node@v4
        with:
          node-version: 'lts/*'
          cache: 'pnpm'
          cache-dependency-path: 'pnpm-lock.yaml'

      - name: Install Rust stable
        uses: dtolnay/rust-toolchain@stable

      - name: Rust cache
        uses: swatinem/rust-cache@v2
        with:
          workspaces: './src-tauri -> target'

      - name: Install frontend dependencies
        run: pnpm install --frozen-lockfile

      - name: Install Rust targets for universal binary
        if: matrix.platform == 'macos-14'
        run: |
          rustup target add aarch64-apple-darwin
          rustup target add x86_64-apple-darwin

      - name: Import Code-Signing Certificates
        if: matrix.platform == 'macos-14'
        uses: apple-actions/import-codesign-certs@v3
        with:
          p12-file-base64: ${{ secrets.APPLE_CERTIFICATE }}
          p12-password: ${{ secrets.APPLE_CERTIFICATE_PASSWORD }}

      - name: Create API Key file
        if: matrix.platform == 'macos-14'
        run: |
          # Create directory for API key
          mkdir -p ~/private_keys

          # Create API key file with proper content and permissions
          echo "${{ secrets.APPLE_API_KEY_PATH }}" > ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8
          chmod 600 ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8

      - name: Build and release
        uses: tauri-apps/tauri-action@v0.5.22
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
          CI: true
          # Apple code signing
          APPLE_SIGNING_IDENTITY: 'Developer ID Application: Daniel Smith (XT349SJG9U)'
          # Tauri updater signing (separate from Apple signing)
          TAURI_SIGNING_PRIVATE_KEY: ${{ secrets.TAURI_PRIVATE_KEY }}
          TAURI_SIGNING_PRIVATE_KEY_PASSWORD: ${{ secrets.TAURI_SIGNING_PRIVATE_KEY_PASSWORD }}
          # Apple notarization via API key
          APPLE_API_ISSUER: ${{ secrets.APPLE_API_ISSUER }}
          APPLE_API_KEY: ${{ secrets.APPLE_API_KEY }}
          APPLE_API_KEY_PATH: ~/private_keys/AuthKey_${{ secrets.APPLE_API_KEY }}.p8
          APPLE_TEAM_ID: ${{ secrets.APPLE_TEAM_ID }}
        with:
          tagName: ${{ github.ref_name || inputs.version }}
          releaseName: 'Astro Editor ${{ github.ref_name || inputs.version }}'
          releaseBody: |
            ## Astro Editor ${{ github.ref_name || inputs.version }}

            ### Installation Instructions
            - **macOS**: Download the `.dmg` file (Universal - works on both Intel and Apple Silicon) and drag Astro Editor to the Applications folder.

            **Full Changelog**: https://github.com/${{ github.repository }}/commits/${{ github.ref_name || inputs.version }}
          releaseDraft: true
          prerelease: false
          includeUpdaterJson: true
          updaterJsonKeepUniversal: true
          args: ${{ matrix.args }}

      - name: Copy DMG to website folder
        if: matrix.platform == 'macos-14'
        run: |
          # Find the generated DMG file
          DMG_FILE=$(find src-tauri/target/release/bundle/dmg -name "*.dmg" | head -1)

          if [ -n "$DMG_FILE" ]; then
            echo "Found DMG: $DMG_FILE"
            # Copy to website folder with static name
            cp "$DMG_FILE" website/astro-editor-latest.dmg
            echo "Copied DMG to website/astro-editor-latest.dmg"
          else
            echo "No DMG file found!"
            exit 1
          fi

      - name: Commit website DMG
        if: matrix.platform == 'macos-14'
        run: |
          git config --local user.email "action@github.com"
          git config --local user.name "GitHub Action"
          git add website/astro-editor-latest.dmg
          git commit -m "chore: update latest DMG for ${{ github.ref_name || inputs.version }}" || echo "No changes to commit"
          git push origin HEAD:main || echo "Failed to push, continuing..."

      - name: Trigger website deployment
        if: matrix.platform == 'macos-14'
        run: |
          echo "Triggering website deployment..."
          gh workflow run deploy-website.yml || echo "Failed to trigger website deployment, continuing..."
        env:
          GITHUB_TOKEN: ${{ secrets.GITHUB_TOKEN }}
